// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2psentinel/sentinel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_p2psentinel_2fsentinel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_p2psentinel_2fsentinel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_p2psentinel_2fsentinel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_p2psentinel_2fsentinel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_p2psentinel_2fsentinel_2eproto;
namespace sentinel {
class EmptyMessage;
class EmptyMessageDefaultTypeInternal;
extern EmptyMessageDefaultTypeInternal _EmptyMessage_default_instance_;
class GossipData;
class GossipDataDefaultTypeInternal;
extern GossipDataDefaultTypeInternal _GossipData_default_instance_;
class PeerCount;
class PeerCountDefaultTypeInternal;
extern PeerCountDefaultTypeInternal _PeerCount_default_instance_;
class RequestData;
class RequestDataDefaultTypeInternal;
extern RequestDataDefaultTypeInternal _RequestData_default_instance_;
class ResponseData;
class ResponseDataDefaultTypeInternal;
extern ResponseDataDefaultTypeInternal _ResponseData_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace sentinel
PROTOBUF_NAMESPACE_OPEN
template<> ::sentinel::EmptyMessage* Arena::CreateMaybeMessage<::sentinel::EmptyMessage>(Arena*);
template<> ::sentinel::GossipData* Arena::CreateMaybeMessage<::sentinel::GossipData>(Arena*);
template<> ::sentinel::PeerCount* Arena::CreateMaybeMessage<::sentinel::PeerCount>(Arena*);
template<> ::sentinel::RequestData* Arena::CreateMaybeMessage<::sentinel::RequestData>(Arena*);
template<> ::sentinel::ResponseData* Arena::CreateMaybeMessage<::sentinel::ResponseData>(Arena*);
template<> ::sentinel::Status* Arena::CreateMaybeMessage<::sentinel::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sentinel {

enum GossipType : int {
  LightClientFinalityUpdateGossipType = 0,
  LightClientOptimisticUpdateGossipType = 1,
  BeaconBlockGossipType = 2,
  AggregateAndProofGossipType = 3,
  VoluntaryExitGossipType = 4,
  ProposerSlashingGossipType = 5,
  AttesterSlashingGossipType = 6,
  GossipType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GossipType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GossipType_IsValid(int value);
constexpr GossipType GossipType_MIN = LightClientFinalityUpdateGossipType;
constexpr GossipType GossipType_MAX = AttesterSlashingGossipType;
constexpr int GossipType_ARRAYSIZE = GossipType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GossipType_descriptor();
template<typename T>
inline const std::string& GossipType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GossipType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GossipType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GossipType_descriptor(), enum_t_value);
}
inline bool GossipType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GossipType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GossipType>(
    GossipType_descriptor(), name, value);
}
// ===================================================================

class EmptyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sentinel.EmptyMessage) */ {
 public:
  inline EmptyMessage() : EmptyMessage(nullptr) {}
  virtual ~EmptyMessage();

  EmptyMessage(const EmptyMessage& from);
  EmptyMessage(EmptyMessage&& from) noexcept
    : EmptyMessage() {
    *this = ::std::move(from);
  }

  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyMessage& operator=(EmptyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyMessage& default_instance();

  static inline const EmptyMessage* internal_default_instance() {
    return reinterpret_cast<const EmptyMessage*>(
               &_EmptyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmptyMessage& a, EmptyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyMessage* New() const final {
    return CreateMaybeMessage<EmptyMessage>(nullptr);
  }

  EmptyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyMessage& from);
  void MergeFrom(const EmptyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sentinel.EmptyMessage";
  }
  protected:
  explicit EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p2psentinel_2fsentinel_2eproto);
    return ::descriptor_table_p2psentinel_2fsentinel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sentinel.EmptyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2psentinel_2fsentinel_2eproto;
};
// -------------------------------------------------------------------

class GossipData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sentinel.GossipData) */ {
 public:
  inline GossipData() : GossipData(nullptr) {}
  virtual ~GossipData();

  GossipData(const GossipData& from);
  GossipData(GossipData&& from) noexcept
    : GossipData() {
    *this = ::std::move(from);
  }

  inline GossipData& operator=(const GossipData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipData& operator=(GossipData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipData& default_instance();

  static inline const GossipData* internal_default_instance() {
    return reinterpret_cast<const GossipData*>(
               &_GossipData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GossipData& a, GossipData& b) {
    a.Swap(&b);
  }
  inline void Swap(GossipData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GossipData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GossipData* New() const final {
    return CreateMaybeMessage<GossipData>(nullptr);
  }

  GossipData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipData& from);
  void MergeFrom(const GossipData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sentinel.GossipData";
  }
  protected:
  explicit GossipData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p2psentinel_2fsentinel_2eproto);
    return ::descriptor_table_p2psentinel_2fsentinel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .sentinel.GossipType type = 2;
  void clear_type();
  ::sentinel::GossipType type() const;
  void set_type(::sentinel::GossipType value);
  private:
  ::sentinel::GossipType _internal_type() const;
  void _internal_set_type(::sentinel::GossipType value);
  public:

  // @@protoc_insertion_point(class_scope:sentinel.GossipData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2psentinel_2fsentinel_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sentinel.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sentinel.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p2psentinel_2fsentinel_2eproto);
    return ::descriptor_table_p2psentinel_2fsentinel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalizedRootFieldNumber = 2,
    kHeadRootFieldNumber = 4,
    kFinalizedEpochFieldNumber = 3,
    kHeadSlotFieldNumber = 5,
    kForkDigestFieldNumber = 1,
  };
  // .types.H256 finalized_root = 2;
  bool has_finalized_root() const;
  private:
  bool _internal_has_finalized_root() const;
  public:
  void clear_finalized_root();
  const ::types::H256& finalized_root() const;
  ::types::H256* release_finalized_root();
  ::types::H256* mutable_finalized_root();
  void set_allocated_finalized_root(::types::H256* finalized_root);
  private:
  const ::types::H256& _internal_finalized_root() const;
  ::types::H256* _internal_mutable_finalized_root();
  public:
  void unsafe_arena_set_allocated_finalized_root(
      ::types::H256* finalized_root);
  ::types::H256* unsafe_arena_release_finalized_root();

  // .types.H256 head_root = 4;
  bool has_head_root() const;
  private:
  bool _internal_has_head_root() const;
  public:
  void clear_head_root();
  const ::types::H256& head_root() const;
  ::types::H256* release_head_root();
  ::types::H256* mutable_head_root();
  void set_allocated_head_root(::types::H256* head_root);
  private:
  const ::types::H256& _internal_head_root() const;
  ::types::H256* _internal_mutable_head_root();
  public:
  void unsafe_arena_set_allocated_head_root(
      ::types::H256* head_root);
  ::types::H256* unsafe_arena_release_head_root();

  // uint64 finalized_epoch = 3;
  void clear_finalized_epoch();
  ::PROTOBUF_NAMESPACE_ID::uint64 finalized_epoch() const;
  void set_finalized_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_finalized_epoch() const;
  void _internal_set_finalized_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 head_slot = 5;
  void clear_head_slot();
  ::PROTOBUF_NAMESPACE_ID::uint64 head_slot() const;
  void set_head_slot(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_head_slot() const;
  void _internal_set_head_slot(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 fork_digest = 1;
  void clear_fork_digest();
  ::PROTOBUF_NAMESPACE_ID::uint32 fork_digest() const;
  void set_fork_digest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fork_digest() const;
  void _internal_set_fork_digest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:sentinel.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::types::H256* finalized_root_;
  ::types::H256* head_root_;
  ::PROTOBUF_NAMESPACE_ID::uint64 finalized_epoch_;
  ::PROTOBUF_NAMESPACE_ID::uint64 head_slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fork_digest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2psentinel_2fsentinel_2eproto;
};
// -------------------------------------------------------------------

class PeerCount PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sentinel.PeerCount) */ {
 public:
  inline PeerCount() : PeerCount(nullptr) {}
  virtual ~PeerCount();

  PeerCount(const PeerCount& from);
  PeerCount(PeerCount&& from) noexcept
    : PeerCount() {
    *this = ::std::move(from);
  }

  inline PeerCount& operator=(const PeerCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerCount& operator=(PeerCount&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerCount& default_instance();

  static inline const PeerCount* internal_default_instance() {
    return reinterpret_cast<const PeerCount*>(
               &_PeerCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PeerCount& a, PeerCount& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerCount* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerCount* New() const final {
    return CreateMaybeMessage<PeerCount>(nullptr);
  }

  PeerCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerCount& from);
  void MergeFrom(const PeerCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sentinel.PeerCount";
  }
  protected:
  explicit PeerCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p2psentinel_2fsentinel_2eproto);
    return ::descriptor_table_p2psentinel_2fsentinel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // uint64 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:sentinel.PeerCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2psentinel_2fsentinel_2eproto;
};
// -------------------------------------------------------------------

class RequestData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sentinel.RequestData) */ {
 public:
  inline RequestData() : RequestData(nullptr) {}
  virtual ~RequestData();

  RequestData(const RequestData& from);
  RequestData(RequestData&& from) noexcept
    : RequestData() {
    *this = ::std::move(from);
  }

  inline RequestData& operator=(const RequestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestData& operator=(RequestData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestData& default_instance();

  static inline const RequestData* internal_default_instance() {
    return reinterpret_cast<const RequestData*>(
               &_RequestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestData& a, RequestData& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestData* New() const final {
    return CreateMaybeMessage<RequestData>(nullptr);
  }

  RequestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestData& from);
  void MergeFrom(const RequestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sentinel.RequestData";
  }
  protected:
  explicit RequestData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p2psentinel_2fsentinel_2eproto);
    return ::descriptor_table_p2psentinel_2fsentinel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTopicFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string topic = 2;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // @@protoc_insertion_point(class_scope:sentinel.RequestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2psentinel_2fsentinel_2eproto;
};
// -------------------------------------------------------------------

class ResponseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sentinel.ResponseData) */ {
 public:
  inline ResponseData() : ResponseData(nullptr) {}
  virtual ~ResponseData();

  ResponseData(const ResponseData& from);
  ResponseData(ResponseData&& from) noexcept
    : ResponseData() {
    *this = ::std::move(from);
  }

  inline ResponseData& operator=(const ResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseData& operator=(ResponseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseData& default_instance();

  static inline const ResponseData* internal_default_instance() {
    return reinterpret_cast<const ResponseData*>(
               &_ResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResponseData& a, ResponseData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseData* New() const final {
    return CreateMaybeMessage<ResponseData>(nullptr);
  }

  ResponseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseData& from);
  void MergeFrom(const ResponseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sentinel.ResponseData";
  }
  protected:
  explicit ResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_p2psentinel_2fsentinel_2eproto);
    return ::descriptor_table_p2psentinel_2fsentinel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool error = 2;
  void clear_error();
  bool error() const;
  void set_error(bool value);
  private:
  bool _internal_error() const;
  void _internal_set_error(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sentinel.ResponseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_p2psentinel_2fsentinel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyMessage

// -------------------------------------------------------------------

// GossipData

// bytes data = 1;
inline void GossipData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& GossipData::data() const {
  // @@protoc_insertion_point(field_get:sentinel.GossipData.data)
  return _internal_data();
}
inline void GossipData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:sentinel.GossipData.data)
}
inline std::string* GossipData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sentinel.GossipData.data)
  return _internal_mutable_data();
}
inline const std::string& GossipData::_internal_data() const {
  return data_.Get();
}
inline void GossipData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GossipData::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sentinel.GossipData.data)
}
inline void GossipData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sentinel.GossipData.data)
}
inline void GossipData::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sentinel.GossipData.data)
}
inline std::string* GossipData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GossipData::release_data() {
  // @@protoc_insertion_point(field_release:sentinel.GossipData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GossipData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sentinel.GossipData.data)
}

// .sentinel.GossipType type = 2;
inline void GossipData::clear_type() {
  type_ = 0;
}
inline ::sentinel::GossipType GossipData::_internal_type() const {
  return static_cast< ::sentinel::GossipType >(type_);
}
inline ::sentinel::GossipType GossipData::type() const {
  // @@protoc_insertion_point(field_get:sentinel.GossipData.type)
  return _internal_type();
}
inline void GossipData::_internal_set_type(::sentinel::GossipType value) {
  
  type_ = value;
}
inline void GossipData::set_type(::sentinel::GossipType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sentinel.GossipData.type)
}

// -------------------------------------------------------------------

// Status

// uint32 fork_digest = 1;
inline void Status::clear_fork_digest() {
  fork_digest_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_fork_digest() const {
  return fork_digest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::fork_digest() const {
  // @@protoc_insertion_point(field_get:sentinel.Status.fork_digest)
  return _internal_fork_digest();
}
inline void Status::_internal_set_fork_digest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fork_digest_ = value;
}
inline void Status::set_fork_digest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fork_digest(value);
  // @@protoc_insertion_point(field_set:sentinel.Status.fork_digest)
}

// .types.H256 finalized_root = 2;
inline bool Status::_internal_has_finalized_root() const {
  return this != internal_default_instance() && finalized_root_ != nullptr;
}
inline bool Status::has_finalized_root() const {
  return _internal_has_finalized_root();
}
inline const ::types::H256& Status::_internal_finalized_root() const {
  const ::types::H256* p = finalized_root_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Status::finalized_root() const {
  // @@protoc_insertion_point(field_get:sentinel.Status.finalized_root)
  return _internal_finalized_root();
}
inline void Status::unsafe_arena_set_allocated_finalized_root(
    ::types::H256* finalized_root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finalized_root_);
  }
  finalized_root_ = finalized_root;
  if (finalized_root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sentinel.Status.finalized_root)
}
inline ::types::H256* Status::release_finalized_root() {
  
  ::types::H256* temp = finalized_root_;
  finalized_root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* Status::unsafe_arena_release_finalized_root() {
  // @@protoc_insertion_point(field_release:sentinel.Status.finalized_root)
  
  ::types::H256* temp = finalized_root_;
  finalized_root_ = nullptr;
  return temp;
}
inline ::types::H256* Status::_internal_mutable_finalized_root() {
  
  if (finalized_root_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    finalized_root_ = p;
  }
  return finalized_root_;
}
inline ::types::H256* Status::mutable_finalized_root() {
  // @@protoc_insertion_point(field_mutable:sentinel.Status.finalized_root)
  return _internal_mutable_finalized_root();
}
inline void Status::set_allocated_finalized_root(::types::H256* finalized_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(finalized_root_);
  }
  if (finalized_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(finalized_root)->GetArena();
    if (message_arena != submessage_arena) {
      finalized_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, finalized_root, submessage_arena);
    }
    
  } else {
    
  }
  finalized_root_ = finalized_root;
  // @@protoc_insertion_point(field_set_allocated:sentinel.Status.finalized_root)
}

// uint64 finalized_epoch = 3;
inline void Status::clear_finalized_epoch() {
  finalized_epoch_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Status::_internal_finalized_epoch() const {
  return finalized_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Status::finalized_epoch() const {
  // @@protoc_insertion_point(field_get:sentinel.Status.finalized_epoch)
  return _internal_finalized_epoch();
}
inline void Status::_internal_set_finalized_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  finalized_epoch_ = value;
}
inline void Status::set_finalized_epoch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_finalized_epoch(value);
  // @@protoc_insertion_point(field_set:sentinel.Status.finalized_epoch)
}

// .types.H256 head_root = 4;
inline bool Status::_internal_has_head_root() const {
  return this != internal_default_instance() && head_root_ != nullptr;
}
inline bool Status::has_head_root() const {
  return _internal_has_head_root();
}
inline const ::types::H256& Status::_internal_head_root() const {
  const ::types::H256* p = head_root_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::H256&>(
      ::types::_H256_default_instance_);
}
inline const ::types::H256& Status::head_root() const {
  // @@protoc_insertion_point(field_get:sentinel.Status.head_root)
  return _internal_head_root();
}
inline void Status::unsafe_arena_set_allocated_head_root(
    ::types::H256* head_root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_root_);
  }
  head_root_ = head_root;
  if (head_root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sentinel.Status.head_root)
}
inline ::types::H256* Status::release_head_root() {
  
  ::types::H256* temp = head_root_;
  head_root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::types::H256* Status::unsafe_arena_release_head_root() {
  // @@protoc_insertion_point(field_release:sentinel.Status.head_root)
  
  ::types::H256* temp = head_root_;
  head_root_ = nullptr;
  return temp;
}
inline ::types::H256* Status::_internal_mutable_head_root() {
  
  if (head_root_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::H256>(GetArena());
    head_root_ = p;
  }
  return head_root_;
}
inline ::types::H256* Status::mutable_head_root() {
  // @@protoc_insertion_point(field_mutable:sentinel.Status.head_root)
  return _internal_mutable_head_root();
}
inline void Status::set_allocated_head_root(::types::H256* head_root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_root_);
  }
  if (head_root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_root)->GetArena();
    if (message_arena != submessage_arena) {
      head_root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_root, submessage_arena);
    }
    
  } else {
    
  }
  head_root_ = head_root;
  // @@protoc_insertion_point(field_set_allocated:sentinel.Status.head_root)
}

// uint64 head_slot = 5;
inline void Status::clear_head_slot() {
  head_slot_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Status::_internal_head_slot() const {
  return head_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Status::head_slot() const {
  // @@protoc_insertion_point(field_get:sentinel.Status.head_slot)
  return _internal_head_slot();
}
inline void Status::_internal_set_head_slot(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  head_slot_ = value;
}
inline void Status::set_head_slot(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_head_slot(value);
  // @@protoc_insertion_point(field_set:sentinel.Status.head_slot)
}

// -------------------------------------------------------------------

// PeerCount

// uint64 amount = 1;
inline void PeerCount::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeerCount::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeerCount::amount() const {
  // @@protoc_insertion_point(field_get:sentinel.PeerCount.amount)
  return _internal_amount();
}
inline void PeerCount::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void PeerCount::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:sentinel.PeerCount.amount)
}

// -------------------------------------------------------------------

// RequestData

// bytes data = 1;
inline void RequestData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RequestData::data() const {
  // @@protoc_insertion_point(field_get:sentinel.RequestData.data)
  return _internal_data();
}
inline void RequestData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:sentinel.RequestData.data)
}
inline std::string* RequestData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sentinel.RequestData.data)
  return _internal_mutable_data();
}
inline const std::string& RequestData::_internal_data() const {
  return data_.Get();
}
inline void RequestData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestData::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sentinel.RequestData.data)
}
inline void RequestData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sentinel.RequestData.data)
}
inline void RequestData::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sentinel.RequestData.data)
}
inline std::string* RequestData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestData::release_data() {
  // @@protoc_insertion_point(field_release:sentinel.RequestData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sentinel.RequestData.data)
}

// string topic = 2;
inline void RequestData::clear_topic() {
  topic_.ClearToEmpty();
}
inline const std::string& RequestData::topic() const {
  // @@protoc_insertion_point(field_get:sentinel.RequestData.topic)
  return _internal_topic();
}
inline void RequestData::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:sentinel.RequestData.topic)
}
inline std::string* RequestData::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:sentinel.RequestData.topic)
  return _internal_mutable_topic();
}
inline const std::string& RequestData::_internal_topic() const {
  return topic_.Get();
}
inline void RequestData::_internal_set_topic(const std::string& value) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestData::set_topic(std::string&& value) {
  
  topic_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sentinel.RequestData.topic)
}
inline void RequestData::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sentinel.RequestData.topic)
}
inline void RequestData::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sentinel.RequestData.topic)
}
inline std::string* RequestData::_internal_mutable_topic() {
  
  return topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestData::release_topic() {
  // @@protoc_insertion_point(field_release:sentinel.RequestData.topic)
  return topic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestData::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sentinel.RequestData.topic)
}

// -------------------------------------------------------------------

// ResponseData

// bytes data = 1;
inline void ResponseData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ResponseData::data() const {
  // @@protoc_insertion_point(field_get:sentinel.ResponseData.data)
  return _internal_data();
}
inline void ResponseData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:sentinel.ResponseData.data)
}
inline std::string* ResponseData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:sentinel.ResponseData.data)
  return _internal_mutable_data();
}
inline const std::string& ResponseData::_internal_data() const {
  return data_.Get();
}
inline void ResponseData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResponseData::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sentinel.ResponseData.data)
}
inline void ResponseData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sentinel.ResponseData.data)
}
inline void ResponseData::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sentinel.ResponseData.data)
}
inline std::string* ResponseData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResponseData::release_data() {
  // @@protoc_insertion_point(field_release:sentinel.ResponseData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResponseData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sentinel.ResponseData.data)
}

// bool error = 2;
inline void ResponseData::clear_error() {
  error_ = false;
}
inline bool ResponseData::_internal_error() const {
  return error_;
}
inline bool ResponseData::error() const {
  // @@protoc_insertion_point(field_get:sentinel.ResponseData.error)
  return _internal_error();
}
inline void ResponseData::_internal_set_error(bool value) {
  
  error_ = value;
}
inline void ResponseData::set_error(bool value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:sentinel.ResponseData.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sentinel

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sentinel::GossipType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sentinel::GossipType>() {
  return ::sentinel::GossipType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_p2psentinel_2fsentinel_2eproto
