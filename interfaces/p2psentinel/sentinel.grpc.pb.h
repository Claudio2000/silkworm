// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: p2psentinel/sentinel.proto
#ifndef GRPC_p2psentinel_2fsentinel_2eproto__INCLUDED
#define GRPC_p2psentinel_2fsentinel_2eproto__INCLUDED

#include "p2psentinel/sentinel.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sentinel {

class Sentinel final {
 public:
  static constexpr char const* service_full_name() {
    return "sentinel.Sentinel";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sentinel::GossipData>> SubscribeGossip(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sentinel::GossipData>>(SubscribeGossipRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sentinel::GossipData>> AsyncSubscribeGossip(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sentinel::GossipData>>(AsyncSubscribeGossipRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sentinel::GossipData>> PrepareAsyncSubscribeGossip(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sentinel::GossipData>>(PrepareAsyncSubscribeGossipRaw(context, request, cq));
    }
    virtual ::grpc::Status SendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::sentinel::ResponseData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::ResponseData>> AsyncSendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::ResponseData>>(AsyncSendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::ResponseData>> PrepareAsyncSendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::ResponseData>>(PrepareAsyncSendRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status SetStatus(::grpc::ClientContext* context, const ::sentinel::Status& request, ::sentinel::EmptyMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::EmptyMessage>> AsyncSetStatus(::grpc::ClientContext* context, const ::sentinel::Status& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::EmptyMessage>>(AsyncSetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::EmptyMessage>> PrepareAsyncSetStatus(::grpc::ClientContext* context, const ::sentinel::Status& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::EmptyMessage>>(PrepareAsyncSetStatusRaw(context, request, cq));
    }
    // Set status for peer filtering.
    virtual ::grpc::Status GetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::sentinel::PeerCount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::PeerCount>> AsyncGetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::PeerCount>>(AsyncGetPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::PeerCount>> PrepareAsyncGetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::PeerCount>>(PrepareAsyncGetPeersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SubscribeGossip(::grpc::ClientContext* context, const ::sentinel::EmptyMessage* request, ::grpc::ClientReadReactor< ::sentinel::GossipData>* reactor) = 0;
      virtual void SendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData* request, ::sentinel::ResponseData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData* request, ::sentinel::ResponseData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetStatus(::grpc::ClientContext* context, const ::sentinel::Status* request, ::sentinel::EmptyMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetStatus(::grpc::ClientContext* context, const ::sentinel::Status* request, ::sentinel::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set status for peer filtering.
      virtual void GetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage* request, ::sentinel::PeerCount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage* request, ::sentinel::PeerCount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::sentinel::GossipData>* SubscribeGossipRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sentinel::GossipData>* AsyncSubscribeGossipRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sentinel::GossipData>* PrepareAsyncSubscribeGossipRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::ResponseData>* AsyncSendRequestRaw(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::ResponseData>* PrepareAsyncSendRequestRaw(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::EmptyMessage>* AsyncSetStatusRaw(::grpc::ClientContext* context, const ::sentinel::Status& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::EmptyMessage>* PrepareAsyncSetStatusRaw(::grpc::ClientContext* context, const ::sentinel::Status& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::PeerCount>* AsyncGetPeersRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sentinel::PeerCount>* PrepareAsyncGetPeersRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::sentinel::GossipData>> SubscribeGossip(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sentinel::GossipData>>(SubscribeGossipRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sentinel::GossipData>> AsyncSubscribeGossip(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sentinel::GossipData>>(AsyncSubscribeGossipRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sentinel::GossipData>> PrepareAsyncSubscribeGossip(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sentinel::GossipData>>(PrepareAsyncSubscribeGossipRaw(context, request, cq));
    }
    ::grpc::Status SendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::sentinel::ResponseData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::ResponseData>> AsyncSendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::ResponseData>>(AsyncSendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::ResponseData>> PrepareAsyncSendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::ResponseData>>(PrepareAsyncSendRequestRaw(context, request, cq));
    }
    ::grpc::Status SetStatus(::grpc::ClientContext* context, const ::sentinel::Status& request, ::sentinel::EmptyMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::EmptyMessage>> AsyncSetStatus(::grpc::ClientContext* context, const ::sentinel::Status& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::EmptyMessage>>(AsyncSetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::EmptyMessage>> PrepareAsyncSetStatus(::grpc::ClientContext* context, const ::sentinel::Status& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::EmptyMessage>>(PrepareAsyncSetStatusRaw(context, request, cq));
    }
    ::grpc::Status GetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::sentinel::PeerCount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::PeerCount>> AsyncGetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::PeerCount>>(AsyncGetPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::PeerCount>> PrepareAsyncGetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sentinel::PeerCount>>(PrepareAsyncGetPeersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubscribeGossip(::grpc::ClientContext* context, const ::sentinel::EmptyMessage* request, ::grpc::ClientReadReactor< ::sentinel::GossipData>* reactor) override;
      void SendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData* request, ::sentinel::ResponseData* response, std::function<void(::grpc::Status)>) override;
      void SendRequest(::grpc::ClientContext* context, const ::sentinel::RequestData* request, ::sentinel::ResponseData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetStatus(::grpc::ClientContext* context, const ::sentinel::Status* request, ::sentinel::EmptyMessage* response, std::function<void(::grpc::Status)>) override;
      void SetStatus(::grpc::ClientContext* context, const ::sentinel::Status* request, ::sentinel::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage* request, ::sentinel::PeerCount* response, std::function<void(::grpc::Status)>) override;
      void GetPeers(::grpc::ClientContext* context, const ::sentinel::EmptyMessage* request, ::sentinel::PeerCount* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::sentinel::GossipData>* SubscribeGossipRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request) override;
    ::grpc::ClientAsyncReader< ::sentinel::GossipData>* AsyncSubscribeGossipRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sentinel::GossipData>* PrepareAsyncSubscribeGossipRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sentinel::ResponseData>* AsyncSendRequestRaw(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sentinel::ResponseData>* PrepareAsyncSendRequestRaw(::grpc::ClientContext* context, const ::sentinel::RequestData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sentinel::EmptyMessage>* AsyncSetStatusRaw(::grpc::ClientContext* context, const ::sentinel::Status& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sentinel::EmptyMessage>* PrepareAsyncSetStatusRaw(::grpc::ClientContext* context, const ::sentinel::Status& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sentinel::PeerCount>* AsyncGetPeersRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sentinel::PeerCount>* PrepareAsyncGetPeersRaw(::grpc::ClientContext* context, const ::sentinel::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeGossip_;
    const ::grpc::internal::RpcMethod rpcmethod_SendRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_SetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SubscribeGossip(::grpc::ServerContext* context, const ::sentinel::EmptyMessage* request, ::grpc::ServerWriter< ::sentinel::GossipData>* writer);
    virtual ::grpc::Status SendRequest(::grpc::ServerContext* context, const ::sentinel::RequestData* request, ::sentinel::ResponseData* response);
    virtual ::grpc::Status SetStatus(::grpc::ServerContext* context, const ::sentinel::Status* request, ::sentinel::EmptyMessage* response);
    // Set status for peer filtering.
    virtual ::grpc::Status GetPeers(::grpc::ServerContext* context, const ::sentinel::EmptyMessage* request, ::sentinel::PeerCount* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeGossip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeGossip() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeGossip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGossip(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::grpc::ServerWriter< ::sentinel::GossipData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeGossip(::grpc::ServerContext* context, ::sentinel::EmptyMessage* request, ::grpc::ServerAsyncWriter< ::sentinel::GossipData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::sentinel::RequestData* /*request*/, ::sentinel::ResponseData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRequest(::grpc::ServerContext* context, ::sentinel::RequestData* request, ::grpc::ServerAsyncResponseWriter< ::sentinel::ResponseData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::sentinel::Status* /*request*/, ::sentinel::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStatus(::grpc::ServerContext* context, ::sentinel::Status* request, ::grpc::ServerAsyncResponseWriter< ::sentinel::EmptyMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPeers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::sentinel::PeerCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeers(::grpc::ServerContext* context, ::sentinel::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::sentinel::PeerCount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeGossip<WithAsyncMethod_SendRequest<WithAsyncMethod_SetStatus<WithAsyncMethod_GetPeers<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubscribeGossip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeGossip() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sentinel::EmptyMessage, ::sentinel::GossipData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sentinel::EmptyMessage* request) { return this->SubscribeGossip(context, request); }));
    }
    ~WithCallbackMethod_SubscribeGossip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGossip(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::grpc::ServerWriter< ::sentinel::GossipData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sentinel::GossipData>* SubscribeGossip(
      ::grpc::CallbackServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sentinel::RequestData, ::sentinel::ResponseData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sentinel::RequestData* request, ::sentinel::ResponseData* response) { return this->SendRequest(context, request, response); }));}
    void SetMessageAllocatorFor_SendRequest(
        ::grpc::MessageAllocator< ::sentinel::RequestData, ::sentinel::ResponseData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sentinel::RequestData, ::sentinel::ResponseData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::sentinel::RequestData* /*request*/, ::sentinel::ResponseData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::sentinel::RequestData* /*request*/, ::sentinel::ResponseData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sentinel::Status, ::sentinel::EmptyMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sentinel::Status* request, ::sentinel::EmptyMessage* response) { return this->SetStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetStatus(
        ::grpc::MessageAllocator< ::sentinel::Status, ::sentinel::EmptyMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sentinel::Status, ::sentinel::EmptyMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::sentinel::Status* /*request*/, ::sentinel::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::sentinel::Status* /*request*/, ::sentinel::EmptyMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPeers() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sentinel::EmptyMessage, ::sentinel::PeerCount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sentinel::EmptyMessage* request, ::sentinel::PeerCount* response) { return this->GetPeers(context, request, response); }));}
    void SetMessageAllocatorFor_GetPeers(
        ::grpc::MessageAllocator< ::sentinel::EmptyMessage, ::sentinel::PeerCount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sentinel::EmptyMessage, ::sentinel::PeerCount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::sentinel::PeerCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPeers(
      ::grpc::CallbackServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::sentinel::PeerCount* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubscribeGossip<WithCallbackMethod_SendRequest<WithCallbackMethod_SetStatus<WithCallbackMethod_GetPeers<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeGossip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeGossip() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeGossip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGossip(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::grpc::ServerWriter< ::sentinel::GossipData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::sentinel::RequestData* /*request*/, ::sentinel::ResponseData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::sentinel::Status* /*request*/, ::sentinel::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPeers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::sentinel::PeerCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeGossip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeGossip() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeGossip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGossip(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::grpc::ServerWriter< ::sentinel::GossipData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeGossip(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::sentinel::RequestData* /*request*/, ::sentinel::ResponseData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::sentinel::Status* /*request*/, ::sentinel::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPeers() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::sentinel::PeerCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeGossip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeGossip() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeGossip(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeGossip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeGossip(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::grpc::ServerWriter< ::sentinel::GossipData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeGossip(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::sentinel::RequestData* /*request*/, ::sentinel::ResponseData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::sentinel::Status* /*request*/, ::sentinel::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPeers() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPeers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::sentinel::PeerCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPeers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sentinel::RequestData, ::sentinel::ResponseData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sentinel::RequestData, ::sentinel::ResponseData>* streamer) {
                       return this->StreamedSendRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendRequest(::grpc::ServerContext* /*context*/, const ::sentinel::RequestData* /*request*/, ::sentinel::ResponseData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sentinel::RequestData,::sentinel::ResponseData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sentinel::Status, ::sentinel::EmptyMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sentinel::Status, ::sentinel::EmptyMessage>* streamer) {
                       return this->StreamedSetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::sentinel::Status* /*request*/, ::sentinel::EmptyMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sentinel::Status,::sentinel::EmptyMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPeers() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sentinel::EmptyMessage, ::sentinel::PeerCount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sentinel::EmptyMessage, ::sentinel::PeerCount>* streamer) {
                       return this->StreamedGetPeers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeers(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::sentinel::PeerCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sentinel::EmptyMessage,::sentinel::PeerCount>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendRequest<WithStreamedUnaryMethod_SetStatus<WithStreamedUnaryMethod_GetPeers<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeGossip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeGossip() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sentinel::EmptyMessage, ::sentinel::GossipData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sentinel::EmptyMessage, ::sentinel::GossipData>* streamer) {
                       return this->StreamedSubscribeGossip(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeGossip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeGossip(::grpc::ServerContext* /*context*/, const ::sentinel::EmptyMessage* /*request*/, ::grpc::ServerWriter< ::sentinel::GossipData>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeGossip(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sentinel::EmptyMessage,::sentinel::GossipData>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeGossip<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeGossip<WithStreamedUnaryMethod_SendRequest<WithStreamedUnaryMethod_SetStatus<WithStreamedUnaryMethod_GetPeers<Service > > > > StreamedService;
};

}  // namespace sentinel


#endif  // GRPC_p2psentinel_2fsentinel_2eproto__INCLUDED
